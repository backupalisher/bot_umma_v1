import os
import logging
import sqlite3
from sqlite3 import Error
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    CallbackContext,
)
import aiohttp
from bs4 import BeautifulSoup
import datetime
import pytz
from cachetools import TTLCache
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
DATABASE = os.getenv("DATABASE", "bot_subscribers.db")

CACHE_TIMEOUT = 3600  # 1 —á–∞—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
CITIES = {
    '–ú–æ—Å–∫–≤–∞': 'moscow',
    '–ö–∞–∑–∞–Ω—å': 'kazan',
    '–£—Ñ–∞': 'ufa',
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 'sankt-peterburg',
    '–ê—Å—Ç–∞–Ω–∞': 'astana',
    '–ê–ª–º–∞—Ç—ã': 'almaty',
    '–ê–∫—Ç–∞—É': 'aktau',
    '–ê—Ç—ã—Ä–∞—É': 'atyrau',
    '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞': 'karaganda',
    '–®—ã–º–∫–µ–Ω—Ç': 'shymkent',
    '–ö–æ—Å—Ç–∞–Ω–∞–π': 'kostanay',
    '–£—Ä–∞–ª—å—Å–∫': 'uralsk',
}

CITY_TIMEZONES = {
    'moscow': 'Europe/Moscow',
    'kazan': 'Europe/Moscow',
    'ufa': 'Asia/Yekaterinburg',
    'sankt-peterburg': 'Europe/Moscow',
    'astana': 'Asia/Almaty',
    'almaty': 'Asia/Almaty',
    'aktau': 'Asia/Aqtau',
    'atyrau': 'Asia/Atyrau',
    'karaganda': 'Asia/Almaty',
    'shymkent': 'Asia/Almaty',
    'kostanay': 'Asia/Qostanay',
    'uralsk': 'Asia/Oral',
}

PRAYER_NAMES = ['–§–∞–¥–∂—Ä', '–®—É—Ä—É–∫', '–ó—É—Ö—Ä', '–ê—Å—Ä', '–ú–∞–≥—Ä–∏–±', '–ò—à–∞']

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
cache = TTLCache(maxsize=100, ttl=CACHE_TIMEOUT)
daily_quotes = {'ayat': None}
sent_notifications = {}
sent_daily_schedules = {}


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            cursor.execute('''CREATE TABLE IF NOT EXISTS subscribers
                             (chat_id INTEGER PRIMARY KEY,
                              city TEXT,
                              timezone TEXT,
                              subscribed INTEGER DEFAULT 1)''')
            conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_subscribed_users():
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT chat_id, city, timezone FROM subscribers WHERE subscribed = 1")
            users = [{'chat_id': row[0], 'city': row[1], 'tz': row[2]} for row in cursor.fetchall()]
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return users
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return []


def update_user(chat_id: int, city: str, timezone: str):
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            cursor.execute('''INSERT OR REPLACE INTO subscribers 
                             (chat_id, city, timezone, subscribed) 
                             VALUES (?, ?, ?, 1)''', (chat_id, city, timezone))
            conn.commit()
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {chat_id}: –≥–æ—Ä–æ–¥={city}, timezone={timezone}")
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")


def unsubscribe_user(chat_id: int):
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE subscribers SET subscribed = 0 WHERE chat_id = ?", (chat_id,))
            conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–ø–∏—Å–∞–Ω")
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")


# –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
async def fetch_url(url: str) -> str:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers={'User-Agent': 'Mozilla/5.0'}) as response:
                return await response.text()
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}: {e}")
        return ""


async def parse_prayer_times(city: str, date: datetime.date) -> dict:
    cache_key = f"{city}_{date}"
    if cache_key in cache:
        return cache[cache_key]

    url = f"https://umma.ru/raspisanie-namaza/{city}"
    try:
        html = await fetch_url(url)
        if not html:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è {city}")
            return {}

        soup = BeautifulSoup(html, 'html.parser')
        table = soup.find('table', class_='PrayTimePage_table__wEx0t')
        if not table:
            logger.error(f"–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {city}")
            return {}

        rows = table.find_all('tr')
        for i, row in enumerate(rows[:3]):
            cols = [col.text.strip() for col in row.find_all('td')]
            logger.debug(f"–°—Ç—Ä–æ–∫–∞ {i} –¥–ª—è {city}: {cols}")

        for row in rows:
            cols = [col.text.strip() for col in row.find_all('td')]
            if len(cols) >= 8 and cols[0] == str(date.day):
                schedule = {
                    '–§–∞–¥–∂—Ä': cols[2],
                    '–®—É—Ä—É–∫': cols[3],
                    '–ó—É—Ö—Ä': cols[4],
                    '–ê—Å—Ä': cols[5],
                    '–ú–∞–≥—Ä–∏–±': cols[6],
                    '–ò—à–∞': cols[7]
                }
                cache[cache_key] = schedule
                logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {city} –Ω–∞ {date}: {schedule}")
                return schedule
        logger.warning(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {city} –Ω–∞ –¥–µ–Ω—å {date.day} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {city}: {e}")
        return {}


async def get_daily_quote(quote_type: str) -> dict:
    cache_key = f"{quote_type}_{datetime.date.today()}"
    if cache_key in cache:
        return cache[cache_key]

    urls = {'ayat': 'https://umma.ru/ayat-dnya', 'hadis': 'https://umma.ru/hadis-dnya'}
    try:
        html = await fetch_url(urls[quote_type])
        if not html:
            return {}
        soup = BeautifulSoup(html, 'html.parser')
        quote_block = soup.find('div', class_='DailyNews_dailyNewsText__5XStP')
        if not quote_block:
            logger.error(f"–ë–ª–æ–∫ —Ü–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {quote_type}")
            return {}
        link = quote_block.find('a').get('href')
        chapter = f"<a href='https://umma.ru{link}'><b>{quote_block.find('h3').text}</b></a>"
        quote_text = quote_block.find('p', class_='DailyNews_dailyNewsContent__Bq4aR').text
        text = f"{chapter}\n{quote_text.replace('–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é', '').replace('[telegramline]', '')}"
        result = {'text': text}
        cache[cache_key] = result
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {quote_type}: {e}")
        return {}


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async def update_data(context=None):
    today = datetime.datetime.now(pytz.timezone('Europe/Moscow')).date()
    for city in CITIES.values():
        await parse_prayer_times(city, today)
    daily_quotes['ayat'] = await get_daily_quote('ayat')
    logger.info("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


# –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –§–∞–¥–∂—Ä
async def send_daily_prayer_schedule(context: CallbackContext):
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    users = get_subscribed_users()
    if not users:
        logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        return

    now = datetime.datetime.now(pytz.utc)
    today = now.date()
    cutoff_date = now - datetime.timedelta(days=1)
    global sent_daily_schedules

    sent_daily_schedules = {
        k: v for k, v in sent_daily_schedules.items()
        if datetime.datetime.strptime(k.split('-')[0], '%Y-%m-%d') > cutoff_date
    }

    for user in users:
        try:
            city = user['city']
            tz = pytz.timezone(user['tz'])
            now = datetime.datetime.now(tz)
            current_time = now.strftime("%H:%M")
            schedule = await parse_prayer_times(city, today)
            if not schedule:
                logger.warning(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {city} –ø—É—Å—Ç–æ–µ")
                continue

            fajr_time = schedule.get('–§–∞–¥–∂—Ä')
            if not fajr_time:
                logger.warning(f"–í—Ä–µ–º—è –§–∞–¥–∂—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {city}")
                continue

            fajr_minutes = sum(x * int(t) for x, t in zip([60, 1], fajr_time.split(":")))
            current_minutes = sum(x * int(t) for x, t in zip([60, 1], current_time.split(":")))
            time_diff = fajr_minutes - current_minutes

            schedule_id = f"{today.strftime('%Y-%m-%d')}-{user['chat_id']}"
            if time_diff == 10 and schedule_id not in sent_daily_schedules:
                schedule_text = "üïã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(
                    [f"‚Ä¢ {name}: <b>{time}</b>" for name, time in schedule.items()]
                )
                await context.bot.send_message(
                    chat_id=user['chat_id'],
                    text=schedule_text,
                    parse_mode='HTML'
                )
                sent_daily_schedules[schedule_id] = True
                logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {user['chat_id']} –≤ {current_time}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {user['chat_id']}: {e}")


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ê—è—Ç–∞ –¥–Ω—è –≤ 8:00 —É—Ç—Ä–∞
async def send_daily_quote(context: CallbackContext):
    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ê—è—Ç–∞ –¥–Ω—è")
    users = get_subscribed_users()
    if not users:
        logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ê—è—Ç–∞ –¥–Ω—è")
        return

    quote = await get_daily_quote('ayat')
    if not quote:
        logger.warning("–ê—è—Ç –¥–Ω—è –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    for user in users:
        try:
            chat_id = user['chat_id']
            tz = pytz.timezone(user['tz'])
            now = datetime.datetime.now(tz)
            current_time = now.strftime("%H:%M")
            if current_time == "08:00":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è 8:00
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üìñ –ê—è—Ç –¥–Ω—è:\n{quote['text']}",
                    parse_mode='HTML'
                )
                logger.info(f"–ê—è—Ç –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {chat_id} –≤ 8:00")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ê—è—Ç–∞ –¥–Ω—è –¥–ª—è {chat_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton("üìñ –ê—è—Ç –¥–Ω—è")],
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    user = update.effective_user
    await update.message.reply_html(
        f"Assalamu Alaikum, {user.mention_html()}! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞.\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:\n"
        "/set_city _- üè† –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é\n"
        "/status - ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/daily_quote _- üìñ –ê—è—Ç –¥–Ω—è\n"
        "/subscribe - ‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/unsubscribe - ‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


async def daily_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT city, timezone FROM subscribers WHERE chat_id = ?", (chat_id,))
            result = cursor.fetchone()
        if not result:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é /set_city")
            return
        city, tz = result
        today = datetime.datetime.now(pytz.timezone(tz)).date()
        schedule = await parse_prayer_times(city, today)
        if schedule:
            text = "üïã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(
                [f"‚Ä¢ <b>{time}</b> - {name}" for name, time in schedule.items()])
            await update.message.reply_text(text, parse_mode='HTML')
        else:
            await update.message.reply_text("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ daily_schedule –¥–ª—è {chat_id}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def daily_quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quote = await get_daily_quote('ayat')
    if quote:
        await update.message.reply_text(f"üìñ –ê—è—Ç –¥–Ω—è:\n{quote['text']}", parse_mode='HTML')
    else:
        await update.message.reply_text("‚ùå –ê—è—Ç –¥–Ω—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT city, timezone, subscribed FROM subscribers WHERE chat_id = ?", (chat_id,))
            result = cursor.fetchone()
        if result:
            city, tz, subscribed = result
            city_name = next((k for k, v in CITIES.items() if v == city), city)
            status_text = "‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω" if subscribed else "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
            await update.message.reply_text(
                f"üè† –ì–æ—Ä–æ–¥: {city_name}\n‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz}\nüì© –°—Ç–∞—Ç—É—Å: {status_text}"
            )
        else:
            await update.message.reply_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é /set_city")
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ status –¥–ª—è {chat_id}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(city, callback_data=f"set_city_{city}")] for city in CITIES]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=InlineKeyboardMarkup(keyboard))


async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üè† –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")],
        [InlineKeyboardButton("‚ÑπÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")]
    ]
    commands_list = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n"
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - ‚ÑπÔ∏è –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "/set_city _- üè† –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é\n"
        "/status - ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/daily_quote _- üìñ –ê—è—Ç –¥–Ω—è\n"
        "/subscribe - ‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/unsubscribe - ‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    await update.message.reply_text(commands_list, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    city_name = query.data.split('_')[-1]
    city_code = CITIES[city_name]
    timezone = CITY_TIMEZONES[city_code]
    chat_id = query.message.chat_id
    update_user(chat_id, city_code, timezone)
    await query.answer(f"–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city_name}")
    await query.edit_message_text(f"–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city_name}")


async def handle_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat_id
    data = query.data

    if data == "change_city":
        keyboard = [[InlineKeyboardButton(city, callback_data=f"set_city_{city}")] for city in CITIES]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == "show_settings":
        try:
            with sqlite3.connect(DATABASE) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT city, timezone, subscribed FROM subscribers WHERE chat_id = ?", (chat_id,))
                result = cursor.fetchone()
            if result:
                city, tz, subscribed = result
                city_name = next((k for k, v in CITIES.items() if v == city), city)
                status_text = "‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω" if subscribed else "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
                settings_text = f"üè† –ì–æ—Ä–æ–¥: {city_name}\n‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz}\nüì© –°—Ç–∞—Ç—É—Å: {status_text}"
            else:
                settings_text = "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é /set_city"
            await query.edit_message_text(settings_text)
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {chat_id}: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    elif data == "back_to_settings":
        keyboard = [
            [InlineKeyboardButton("üè† –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")],
            [InlineKeyboardButton("‚ÑπÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")]
        ]
        commands_list = (
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n"
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
            "/start - ‚ÑπÔ∏è –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
            "/set_city _- üè† –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é\n"
            "/status - ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/daily_quote _- üìñ –ê—è—Ç –¥–Ω—è\n"
            "/subscribe - ‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "/unsubscribe - ‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        )
        await query.edit_message_text(commands_list, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

    await query.answer()


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT city FROM subscribers WHERE chat_id = ?", (chat_id,))
            result = cursor.fetchone()
            if not result:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é /set_city")
                return
            cursor.execute("UPDATE subscribers SET subscribed = 1 WHERE chat_id = ?", (chat_id,))
            conn.commit()
        await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ {chat_id}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    unsubscribe_user(chat_id)
    await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")


async def check_prayer_times(context: CallbackContext):
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞")
    users = get_subscribed_users()
    if not users:
        logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    now = datetime.datetime.now(pytz.utc)
    cutoff_date = now - datetime.timedelta(days=1)
    global sent_notifications

    cleaned_notifications = {}
    for k, v in sent_notifications.items():
        try:
            date_part = k.split('-')[0]
            if len(date_part) == 10 and date_part[4] == '-' and date_part[7] == '-':
                if datetime.datetime.strptime(date_part, '%Y-%m-%d') > cutoff_date:
                    cleaned_notifications[k] = v
            else:
                logger.warning(f"–£–¥–∞–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {k}")
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–∞ {k}: {e}")
    sent_notifications = cleaned_notifications

    for user in users:
        try:
            city = user['city']
            tz = pytz.timezone(user['tz'])
            now = datetime.datetime.now(tz)
            today = now.date()
            current_time = now.strftime("%H:%M")
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {user['chat_id']}: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {current_time}")

            schedule = await parse_prayer_times(city, today)
            if not schedule:
                logger.warning(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {city} –ø—É—Å—Ç–æ–µ")
                continue

            logger.debug(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {city}: {schedule}")
            for prayer, time in schedule.items():
                prayer_minutes = sum(x * int(t) for x, t in zip([60, 1], time.split(":")))
                current_minutes = sum(x * int(t) for x, t in zip([60, 1], current_time.split(":")))
                time_diff = prayer_minutes - current_minutes

                notification_id = f"{today.strftime('%Y-%m-%d')}-{prayer}-{user['chat_id']}"
                if time_diff == 0 and notification_id not in sent_notifications:
                    await context.bot.send_message(
                        chat_id=user['chat_id'],
                        text=f"üïå –í—Ä–µ–º—è <u>{prayer}</u> –Ω–∞–º–∞–∑–∞: <b>{time}</b>",
                        parse_mode='HTML'
                    )
                    sent_notifications[notification_id] = True
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {prayer} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {user['chat_id']} –≤ {time}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['chat_id']}: {e}")


async def post_init(application: Application):
    global sent_notifications, sent_daily_schedules
    sent_notifications = {}
    sent_daily_schedules = {}
    await update_data()
    logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")


def main():
    init_db()
    try:
        application = (
            Application.builder()
            .token("8090552462:AAE3m8cIvTZwkkBjHL5PCAA4Iv1rztl5PsU")
            .post_init(post_init)
            .build()
        )

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("set_city", get_city))
        application.add_handler(CommandHandler("status", status))
        application.add_handler(CommandHandler("daily_quote", daily_quote))
        application.add_handler(CommandHandler("subscribe", subscribe))
        application.add_handler(CommandHandler("unsubscribe", unsubscribe))
        application.add_handler(MessageHandler(filters.Text("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"), daily_schedule))
        application.add_handler(MessageHandler(filters.Text("üìñ –ê—è—Ç –¥–Ω—è"), daily_quote))
        application.add_handler(MessageHandler(filters.Text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), settings))

        application.add_handler(CallbackQueryHandler(set_city, pattern="^set_city_"))
        application.add_handler(
            CallbackQueryHandler(handle_settings_callback, pattern="^(change_city|show_settings|back_to_settings)$"))

        job_queue = application.job_queue
        if job_queue:
            job_queue.run_repeating(check_prayer_times, interval=60)
            job_queue.run_repeating(send_daily_prayer_schedule, interval=60)
            job_queue.run_repeating(send_daily_quote, interval=60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è 8:00
            job_queue.run_daily(update_data, time=datetime.time(1, 0, 0, tzinfo=pytz.timezone('Europe/Moscow')))

        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()